[{"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/index.tsx":"1","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/App.tsx":"2","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/reportWebVitals.ts":"3","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/dashboard/dashboard.tsx":"4","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/log-in-page/log-in-page.tsx":"5","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sign-up-page/sign-up-page.tsx":"6","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/home-page/home-page.tsx":"7","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sidebar/sidebar.tsx":"8","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/WelcomeUserPage/welcome-user-page.tsx":"9","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/apiServise.tsx":"10","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/user-page/user-page.tsx":"11","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sentiment-analysis/sentiment-analysis.tsx":"12","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/header /header.tsx":"13","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/header /header-two.tsx":"14"},{"size":500,"mtime":1611080931916,"results":"15","hashOfConfig":"16"},{"size":897,"mtime":1611585448624,"results":"17","hashOfConfig":"16"},{"size":425,"mtime":1610539309826,"results":"18","hashOfConfig":"16"},{"size":865,"mtime":1611585679200,"results":"19","hashOfConfig":"16"},{"size":2034,"mtime":1611585739830,"results":"20","hashOfConfig":"16"},{"size":2638,"mtime":1611585861353,"results":"21","hashOfConfig":"16"},{"size":2818,"mtime":1613212555629,"results":"22","hashOfConfig":"16"},{"size":2628,"mtime":1611087762778,"results":"23","hashOfConfig":"16"},{"size":167,"mtime":1611065788892,"results":"24","hashOfConfig":"16"},{"size":1080,"mtime":1611056427214,"results":"25","hashOfConfig":"16"},{"size":2640,"mtime":1611085902729,"results":"26","hashOfConfig":"16"},{"size":1428,"mtime":1611125577164,"results":"27","hashOfConfig":"16"},{"size":496,"mtime":1611585577857,"results":"28","hashOfConfig":"16"},{"size":293,"mtime":1611585599959,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1djeitl",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/index.tsx",[],["61","62"],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/App.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/reportWebVitals.ts",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/dashboard/dashboard.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/log-in-page/log-in-page.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sign-up-page/sign-up-page.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/home-page/home-page.tsx",["63"],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sidebar/sidebar.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/WelcomeUserPage/welcome-user-page.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/apiServise.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/user-page/user-page.tsx",["64","65"],"import { FC, useState, useEffect, useMemo } from 'react';\nimport Moment from 'moment';\nimport { Diary, Entry } from './../../types';\nimport WelcomeUserPage from './../WelcomeUserPage/welcome-user-page';\nimport SentimentAnalysis from './../sentiment-analysis/sentiment-analysis';\n\nimport './user-page.css';\ninterface Props {\n  diary: Diary;\n  addEntry: (diaryId: string, text: string) => void;\n}\n\nconst UserPage: React.FC<Props> = ({ diary, addEntry }) => {\n  const [entryFieldClicked, setEntryField] = useState<Boolean>(false);\n  const [diaryEntry, setDiaryEntry] = useState<string>('');\n  const [entries, setEntries] = useState<Entry[]>(diary.entries.slice(1));\n  function handleEntry(e: any) {\n    setDiaryEntry(e.target.value);\n  }\n  function toggle() {\n    setEntryField(!entryFieldClicked);\n  }\n  function handleSubmit(e: any) {\n    e.preventDefault();\n    if (diaryEntry !== '' && diary?._id) addEntry(diary?._id, diaryEntry);\n    setDiaryEntry('');\n    toggle();\n  }\n  useEffect(() => {\n    setEntries(diary.entries.slice(1));\n  }, [diary]);\n\n  return diary === undefined ? (\n    <WelcomeUserPage />\n  ) : (\n    <div>\n      <div className=\"diaryName\">{diary.diaryName}</div>\n      <div>\n        <button className=\"redirect\" onClick={toggle}>\n          Create new entry for this diary!\n        </button>\n      </div>\n\n      {entryFieldClicked === true ? (\n        <div className=\"form-box-for-user\">\n          <form className=\"diary-form\" onSubmit={handleSubmit}>\n            <div className=\"Text\">\n              {Moment(new Date()).format('MMMM Do, YYYY')}\n            </div>\n            <textarea\n              placeholder=\"Remember, be nice!\"\n              value={diaryEntry}\n              onChange={handleEntry}\n            />\n            <button\n              className=\"redirect\"\n              type=\"submit\"\n              value=\"Submit\"\n              onSubmit={handleSubmit}\n            >\n              Create new Entry\n            </button>\n          </form>\n        </div>\n      ) : (\n        <div>\n          <SentimentAnalysis entries={diary.entries}></SentimentAnalysis>\n          <div className=\"my-entries\">\n            {entries.map((entry: any) => {\n              return (\n                <div className=\"entry-box\">\n                  <div className=\"date\">\n                    {Moment(entry.date).format('DD.MM')}\n                  </div>\n                  <div className=\"diary-entry-text\">\n                    <div className=\"texti\">{entry.text}</div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default UserPage;\n","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sentiment-analysis/sentiment-analysis.tsx",["66"],"import { FC } from 'react';\nimport React from 'react';\nimport { Entry } from './../../types';\nimport './sentiment-analysis.css';\nimport Moment from 'moment';\n\ninterface Props {\n  entries: Entry[];\n}\nconst SentimentAnalysis: React.FC<Props> = ({ entries }) => {\n  function convertToNum(el: string) {\n    return el === 'Positive' ? 1 : el === 'Negative' ? -1 : 0;\n  }\n  const arr = entries.slice(1);\n\n  const sentiments = arr.map((entry) => {\n    let number: number = 0;\n    const senArr = entry.sentiment;\n    senArr?.forEach((element) => {\n      number = number + convertToNum(element);\n    });\n    if (senArr) {\n      return {\n        date: entry.date,\n        sentriment: number / senArr.length,\n      };\n    } else return null;\n  });\n  return (\n    <div className=\"outerBox\">\n      <div className=\"last-analysis\">\n        YOUR SENTIMENT ANALYSIS FOR LAST 14 DAYS\n      </div>\n      <div className=\"inner-box\">\n        {sentiments.map((item) => {\n          return (\n            <div>\n              <div\n                className={\n                  item !== null && item.sentriment >= 0 ? 'goodDay' : 'badDay'\n                }\n              >\n                <div className=\"date-in-bubble\">\n                  {Moment(item !== null ? item.date : null).format('DD.MM ')}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default SentimentAnalysis;\n","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/header /header.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/header /header-two.tsx",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":60,"column":6,"nodeType":"73","endLine":60,"endColumn":8,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":1,"column":10,"nodeType":"77","messageId":"78","endLine":1,"endColumn":12},{"ruleId":"75","severity":1,"message":"79","line":1,"column":35,"nodeType":"77","messageId":"78","endLine":1,"endColumn":42},{"ruleId":"75","severity":1,"message":"76","line":1,"column":10,"nodeType":"77","messageId":"78","endLine":1,"endColumn":12},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isLoaded'. Either include it or remove the dependency array.","ArrayExpression",["82"],"@typescript-eslint/no-unused-vars","'FC' is defined but never used.","Identifier","unusedVar","'useMemo' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [isLoaded]",{"range":"85","text":"86"},[2047,2049],"[isLoaded]"]