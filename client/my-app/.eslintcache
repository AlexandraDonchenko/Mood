[{"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/index.tsx":"1","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/App.tsx":"2","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/reportWebVitals.ts":"3","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/dashboard/dashboard.tsx":"4","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/log-in-page/log-in-page.tsx":"5","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sign-up-page/sign-up-page.tsx":"6","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/home-page/home-page.tsx":"7","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sidebar/sidebar.tsx":"8","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/WelcomeUserPage/welcome-user-page.tsx":"9","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/apiServise.tsx":"10","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/user-page/user-page.tsx":"11","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sentiment-analysis/sentiment-analysis.tsx":"12","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/header/header.tsx":"13"},{"size":500,"mtime":1611080931916,"results":"14","hashOfConfig":"15"},{"size":897,"mtime":1611585448624,"results":"16","hashOfConfig":"15"},{"size":425,"mtime":1610539309826,"results":"17","hashOfConfig":"15"},{"size":869,"mtime":1613215681704,"results":"18","hashOfConfig":"15"},{"size":2038,"mtime":1613215679314,"results":"19","hashOfConfig":"15"},{"size":2635,"mtime":1613215667787,"results":"20","hashOfConfig":"15"},{"size":2741,"mtime":1613213141344,"results":"21","hashOfConfig":"15"},{"size":2635,"mtime":1613212831655,"results":"22","hashOfConfig":"15"},{"size":174,"mtime":1613212950093,"results":"23","hashOfConfig":"15"},{"size":1080,"mtime":1611056427214,"results":"24","hashOfConfig":"15"},{"size":2646,"mtime":1613213111326,"results":"25","hashOfConfig":"15"},{"size":1435,"mtime":1613212788243,"results":"26","hashOfConfig":"15"},{"size":624,"mtime":1613229028455,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1djeitl",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/index.tsx",[],["58","59"],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/App.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/reportWebVitals.ts",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/dashboard/dashboard.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/log-in-page/log-in-page.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sign-up-page/sign-up-page.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/home-page/home-page.tsx",["60"],"import Sidebar from './../sidebar/sidebar';\nimport './home-page.module.css';\nimport Obj from './../../apiServise';\nimport { Diary } from './../../types';\nimport UserPage from './../user-page/user-page';\nimport React, { useEffect, useState } from 'react';\nimport WelcomeUserPage from '../WelcomeUserPage/welcome-user-page';\n\nfunction Homepage() {\n  const [diaries, setDiaries] = useState<Diary[]>([]);\n  const [isLoaded, setLoaded] = useState<Boolean>(false);\n  const [pickedDiary, setPickedDiary] = useState<Diary | undefined>();\n\n  //----------------------------------------------------------------------------------------\n  const createDiary = async function (name: string) {\n    setLoaded(false);\n    const oldDiaries = diaries;\n    const data = await Obj.postEntrie({\n      diaryName: name,\n      user: 1,\n      entries: [{}],\n    });\n    setDiaries([...oldDiaries, data]);\n    setLoaded(true);\n  };\n  //---------------------------------------------------------------------------------------------------------------------\n  const addEntry = async function (diaryId: string, text: string) {\n    let oldEntries = diaries.filter((diary) => {\n      return diary._id === diaryId;\n    });\n    const date: Date = new Date();\n    const entry: {\n      date: Date;\n      text: string;\n    } = { date: date, text: text };\n    const entries = [...oldEntries[0].entries, entry];\n    const diary = await Obj.addEntry({ id: diaryId, entries });\n    setPickedDiary(diary);\n  };\n\n  const getEntries = function (diaryId: string) {\n    setLoaded(false);\n    const diary = diaries.find((diary) => {\n      return diary._id === diaryId;\n    });\n    setPickedDiary(diary);\n    setLoaded(true);\n    return diary;\n  };\n  console.log(diaries, 'HOME');\n  //---------------------------------------------------------------------------------------\n\n  useEffect(() => {\n    Obj.getDiaries().then((diaries) => {\n      setDiaries(diaries);\n      setLoaded(true);\n      if (isLoaded === true) console.log(diaries);\n    });\n  }, []);\n\n  //------------------------------------------------------------------------------------------------\n  return (\n    <div className=\"homepage\">\n      {isLoaded === true\n        ? [\n            <div>\n              {' '}\n              <div className=\"home-page-2\">\n                <Sidebar\n                  createDiary={createDiary}\n                  getEntries={getEntries}\n                  diaries={diaries}\n                />\n                {pickedDiary !== undefined ? (\n                  <UserPage diary={pickedDiary} addEntry={addEntry} />\n                ) : (\n                  <WelcomeUserPage />\n                )}\n              </div>\n            </div>,\n          ]\n        : null}\n    </div>\n  );\n}\nexport default Homepage;\n","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sidebar/sidebar.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/WelcomeUserPage/welcome-user-page.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/apiServise.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/user-page/user-page.tsx",["61","62"],"import { FC, useState, useEffect, useMemo } from 'react';\nimport Moment from 'moment';\nimport { Diary, Entry } from './../../types';\nimport WelcomeUserPage from './../WelcomeUserPage/welcome-user-page';\nimport SentimentAnalysis from './../sentiment-analysis/sentiment-analysis';\nimport './user-page.module.css'\n\ninterface Props {\n  diary: Diary;\n  addEntry: (diaryId: string, text: string) => void;\n}\n\nconst UserPage: React.FC<Props> = ({ diary, addEntry }) => {\n  const [entryFieldClicked, setEntryField] = useState<Boolean>(false);\n  const [diaryEntry, setDiaryEntry] = useState<string>('');\n  const [entries, setEntries] = useState<Entry[]>(diary.entries.slice(1));\n  function handleEntry(e: any) {\n    setDiaryEntry(e.target.value);\n  }\n  function toggle() {\n    setEntryField(!entryFieldClicked);\n  }\n  function handleSubmit(e: any) {\n    e.preventDefault();\n    if (diaryEntry !== '' && diary?._id) addEntry(diary?._id, diaryEntry);\n    setDiaryEntry('');\n    toggle();\n  }\n  useEffect(() => {\n    setEntries(diary.entries.slice(1));\n  }, [diary]);\n\n  return diary === undefined ? (\n    <WelcomeUserPage />\n  ) : (\n    <div>\n      <div className=\"diaryName\">{diary.diaryName}</div>\n      <div>\n        <button className=\"redirect\" onClick={toggle}>\n          Create new entry for this diary!\n        </button>\n      </div>\n\n      {entryFieldClicked === true ? (\n        <div className=\"form-box-for-user\">\n          <form className=\"diary-form\" onSubmit={handleSubmit}>\n            <div className=\"Text\">\n              {Moment(new Date()).format('MMMM Do, YYYY')}\n            </div>\n            <textarea\n              placeholder=\"Remember, be nice!\"\n              value={diaryEntry}\n              onChange={handleEntry}\n            />\n            <button\n              className=\"redirect\"\n              type=\"submit\"\n              value=\"Submit\"\n              onSubmit={handleSubmit}\n            >\n              Create new Entry\n            </button>\n          </form>\n        </div>\n      ) : (\n        <div>\n          <SentimentAnalysis entries={diary.entries}></SentimentAnalysis>\n          <div className=\"my-entries\">\n            {entries.map((entry: any) => {\n              return (\n                <div className=\"entry-box\">\n                  <div className=\"date\">\n                    {Moment(entry.date).format('DD.MM')}\n                  </div>\n                  <div className=\"diary-entry-text\">\n                    <div className=\"texti\">{entry.text}</div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default UserPage;\n","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sentiment-analysis/sentiment-analysis.tsx",["63"],"import { FC } from 'react';\nimport React from 'react';\nimport { Entry } from './../../types';\nimport './sentiment-analysis.module.css';\nimport Moment from 'moment';\n\ninterface Props {\n  entries: Entry[];\n}\nconst SentimentAnalysis: React.FC<Props> = ({ entries }) => {\n  function convertToNum(el: string) {\n    return el === 'Positive' ? 1 : el === 'Negative' ? -1 : 0;\n  }\n  const arr = entries.slice(1);\n\n  const sentiments = arr.map((entry) => {\n    let number: number = 0;\n    const senArr = entry.sentiment;\n    senArr?.forEach((element) => {\n      number = number + convertToNum(element);\n    });\n    if (senArr) {\n      return {\n        date: entry.date,\n        sentriment: number / senArr.length,\n      };\n    } else return null;\n  });\n  return (\n    <div className=\"outerBox\">\n      <div className=\"last-analysis\">\n        YOUR SENTIMENT ANALYSIS FOR LAST 14 DAYS\n      </div>\n      <div className=\"inner-box\">\n        {sentiments.map((item) => {\n          return (\n            <div>\n              <div\n                className={\n                  item !== null && item.sentriment >= 0 ? 'goodDay' : 'badDay'\n                }\n              >\n                <div className=\"date-in-bubble\">\n                  {Moment(item !== null ? item.date : null).format('DD.MM ')}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default SentimentAnalysis;\n","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/header/header.tsx",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":59,"column":6,"nodeType":"70","endLine":59,"endColumn":8,"suggestions":"71"},{"ruleId":"72","severity":1,"message":"73","line":1,"column":10,"nodeType":"74","messageId":"75","endLine":1,"endColumn":12},{"ruleId":"72","severity":1,"message":"76","line":1,"column":35,"nodeType":"74","messageId":"75","endLine":1,"endColumn":42},{"ruleId":"72","severity":1,"message":"73","line":1,"column":10,"nodeType":"74","messageId":"75","endLine":1,"endColumn":12},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isLoaded'. Either include it or remove the dependency array.","ArrayExpression",["79"],"@typescript-eslint/no-unused-vars","'FC' is defined but never used.","Identifier","unusedVar","'useMemo' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [isLoaded]",{"range":"82","text":"83"},[1998,2000],"[isLoaded]"]