[{"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/index.tsx":"1","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/App.tsx":"2","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/reportWebVitals.ts":"3","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/dashboard/dashboard.tsx":"4","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/log-in-page/log-in-page.tsx":"5","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sign-up-page/sign-up-page.tsx":"6","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/home-page/home-page.tsx":"7","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sidebar/sidebar.tsx":"8","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/WelcomeUserPage/welcome-user-page.tsx":"9","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/apiServise.tsx":"10","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/user-page/user-page.tsx":"11","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sentiment-analysis/sentiment-analysis.tsx":"12"},{"size":500,"mtime":1610539309823,"results":"13","hashOfConfig":"14"},{"size":1433,"mtime":1610994944764,"results":"15","hashOfConfig":"14"},{"size":425,"mtime":1610539309826,"results":"16","hashOfConfig":"14"},{"size":698,"mtime":1610995780541,"results":"17","hashOfConfig":"14"},{"size":1328,"mtime":1610641312288,"results":"18","hashOfConfig":"14"},{"size":2043,"mtime":1610731998673,"results":"19","hashOfConfig":"14"},{"size":2474,"mtime":1610966585698,"results":"20","hashOfConfig":"14"},{"size":2326,"mtime":1610966160714,"results":"21","hashOfConfig":"14"},{"size":104,"mtime":1610632366386,"results":"22","hashOfConfig":"14"},{"size":1073,"mtime":1610963794358,"results":"23","hashOfConfig":"14"},{"size":1931,"mtime":1610971831728,"results":"24","hashOfConfig":"14"},{"size":1205,"mtime":1610988644269,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1djeitl",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/index.tsx",[],["56","57"],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/App.tsx",["58"],"import React from 'react';\nimport './App.css';\nimport { Router, Link, RouteComponentProps, Location } from '@reach/router';\nimport DashBoard from './components/dashboard/dashboard';\nimport LogIn from './components/log-in-page/log-in-page';\nimport SignUP from './components/sign-up-page/sign-up-page';\nimport Homepage from './components/home-page/home-page';\nimport './App.css';\nconst test: string = 'TEST'; // variable to try to pass down by props\n\n//const test: string = 'Hello';\nconst Dash = (props: RouteComponentProps) => <DashBoard />;\nconst Login = (props: RouteComponentProps) => <LogIn />;\nconst SignUp = (props: RouteComponentProps) => <SignUP />;\nconst HomePage = (props: RouteComponentProps) => <Homepage />;\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"logo\">\n          <Link to=\"/\" className=\"text-link\" state={{ hello: test }}>\n            MOOOOOOOOOD\n          </Link>\n        </div>\n        <div className=\"buttons\">\n          <Link to=\"/sign-up\" className=\"text-link\">\n            Sign up\n          </Link>\n          <Link to=\"/log-in\" className=\"text-link\">\n            Log in\n          </Link>\n        </div>\n      </header>\n      <Router>\n        <Login path=\"log-in/*\" />\n        <SignUp path=\"sign-up/*\" />\n        <Dash path=\"/\" />\n        <HomePage path=\"/homepage/:1\" />\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/reportWebVitals.ts",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/dashboard/dashboard.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/log-in-page/log-in-page.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sign-up-page/sign-up-page.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/home-page/home-page.tsx",["59"],"import Sidebar from './../sidebar/sidebar';\nimport './home-page.css';\nimport Obj from './../../apiServise';\nimport { Diary } from './../../types';\nimport UserPage from './../user-page/user-page';\nimport React, { useEffect, useState } from 'react';\n\nfunction Homepage() {\n  const [diaries, setDiaries] = useState<Diary[]>([]);\n  const [isLoaded, setLoaded] = useState<Boolean>(false);\n  const [pickedDiary, setPickedDiary] = useState<Diary | undefined>();\n\n  //----------------------------------------------------------------------------------------\n  const createDiary = async function (name: string) {\n    setLoaded(false);\n    const oldDiaries = diaries;\n    const data = await Obj.postEntrie({\n      diaryName: name,\n      user: 1,\n      entries: [{}],\n    });\n    setDiaries([...oldDiaries, data]);\n    setLoaded(true);\n  };\n  const addEntry = async function (diaryId: string, text: string) {\n    setLoaded(false);\n    let oldEntries = diaries.filter((diary) => {\n      return diary._id === diaryId;\n    });\n    const date: Date = new Date();\n    const entry: {\n      date: Date;\n      text: string;\n    } = { date: date, text: text };\n    const entries = [...oldEntries[0].entries, entry];\n    Obj.addEntry({ id: diaryId, entries });\n    setLoaded(true);\n  };\n  const getEntries = function (diaryId: string) {\n    setLoaded(false);\n    const diary = diaries.filter((diary) => {\n      return diary._id === diaryId;\n    });\n    setPickedDiary(diary[0]);\n    setLoaded(true);\n    return diary;\n  };\n  //---------------------------------------------------------------------------------------\n  useEffect(() => {\n    Obj.getDiaries().then((diaries) => {\n      setDiaries(diaries);\n      setLoaded(true);\n      if (isLoaded === true) console.log(diaries);\n    });\n  }, []);\n  useEffect(() => {\n    Obj.getDiaries().then((diaries) => {\n      setDiaries(diaries);\n      setLoaded(true);\n      if (isLoaded === true) console.log(diaries);\n    });\n  }, [isLoaded]);\n\n  //------------------------------------------------------------------------------------------------\n  return (\n    <div className=\"homepage\">\n      {isLoaded === true\n        ? [\n            <div>\n              <Sidebar\n                createDiary={createDiary}\n                getEntries={getEntries}\n                diaries={diaries}\n              />\n              <UserPage diary={pickedDiary} addEntry={addEntry} />\n            </div>,\n          ]\n        : null}\n    </div>\n  );\n}\nexport default Homepage;\n","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sidebar/sidebar.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/WelcomeUserPage/welcome-user-page.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/apiServise.tsx",[],"/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/user-page/user-page.tsx",["60","61"],"import { FC, useState, useEffect } from 'react';\nimport Moment from 'moment';\nimport { Diary, Entry } from './../../types';\nimport WelcomeUserPage from './../WelcomeUserPage/welcome-user-page';\nimport SentimentAnalysis from './../sentiment-analysis/sentiment-analysis';\ninterface Props {\n  diary: Diary | undefined;\n  addEntry: (diaryId: string, text: string) => void;\n}\n\nconst UserPage: React.FC<Props> = ({ diary, addEntry }) => {\n  let entries: Entry[] = diary ? diary.entries : [];\n\n  const [entryFieldClicked, setEntryField] = useState<Boolean>(false);\n  const [diaryEntry, setDiaryEntry] = useState<string>('');\n  function handleEntry(e: any) {\n    setDiaryEntry(e.target.value);\n  }\n\n  function toggle() {\n    setEntryField(!entryFieldClicked);\n  }\n  function handleSubmit(e: any) {\n    e.preventDefault();\n    if (diaryEntry !== '' && diary?._id) addEntry(diary?._id, diaryEntry);\n    setDiaryEntry('');\n    toggle();\n  }\n\n  return diary === undefined ? (\n    <WelcomeUserPage />\n  ) : (\n    <div>\n      <div>{diary.diaryName}</div>\n      <button onClick={toggle}>Create new entry for this diary!</button>\n      {entryFieldClicked === true ? (\n        <div>\n          <form onSubmit={handleSubmit}>\n            <label>\n              TELL ME HOW WAS YOUR DAY\n              <input type=\"text\" value={diaryEntry} onChange={handleEntry} />\n            </label>\n            <button type=\"submit\" value=\"Submit\" onSubmit={handleSubmit}>\n              Create new Entry\n            </button>\n          </form>\n        </div>\n      ) : null}\n      <div className=\"my-entries\">\n        {entries.map((entry: any) => {\n          return (\n            <div>\n              <div>{Moment(entry.date).format('MMMM Do, YYYY')}</div>\n              <div>{entry.text}</div>\n            </div>\n          );\n        })}\n      </div>\n      <SentimentAnalysis entries={diary.entries}></SentimentAnalysis>\n    </div>\n  );\n};\nexport default UserPage;\n","/Users/alexandradonchenko/Documents/Coding/Codeworks/Solo-project/Mood/client/my-app/src/components/sentiment-analysis/sentiment-analysis.tsx",["62"],"import { FC } from 'react';\nimport React from 'react';\nimport { Entry } from './../../types';\nimport './sentiment-analysis.css';\nimport Moment from 'moment';\n\ninterface Props {\n  entries: Entry[];\n}\nconst SentimentAnalysis: React.FC<Props> = ({ entries }) => {\n  function convertToNum(el: string) {\n    return el === 'Positive' ? 1 : el === 'Negative' ? -1 : 0;\n  }\n  const arr = entries.slice(1);\n\n  const sentiments = arr.map((entry) => {\n    let number: number = 0;\n    const senArr = entry.sentiment;\n    senArr?.forEach((element) => {\n      number = number + convertToNum(element);\n    });\n    if (senArr) {\n      return {\n        date: entry.date,\n        sentriment: number / senArr.length,\n      };\n    } else return null;\n  });\n  return (\n    <div className=\"outerBox\">\n      {sentiments.map((item) => {\n        return (\n          <div>\n            <div\n              className={\n                item !== null && item.sentriment > 0 ? 'goodDay' : 'badDay'\n              }\n            >\n              {Moment(item !== null ? item.date : null).format('MMMM Do, YYYY')}\n            </div>\n          </div>\n        );\n      })}\n      <div></div>\n    </div>\n  );\n};\n\nexport default SentimentAnalysis;\n",["63","64"],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":3,"column":45,"nodeType":"71","messageId":"72","endLine":3,"endColumn":53},{"ruleId":"73","severity":1,"message":"74","line":55,"column":6,"nodeType":"75","endLine":55,"endColumn":8,"suggestions":"76"},{"ruleId":"69","severity":1,"message":"77","line":1,"column":10,"nodeType":"71","messageId":"72","endLine":1,"endColumn":12},{"ruleId":"69","severity":1,"message":"78","line":1,"column":24,"nodeType":"71","messageId":"72","endLine":1,"endColumn":33},{"ruleId":"69","severity":1,"message":"77","line":1,"column":10,"nodeType":"71","messageId":"72","endLine":1,"endColumn":12},{"ruleId":"65","replacedBy":"79"},{"ruleId":"67","replacedBy":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"@typescript-eslint/no-unused-vars","'Location' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isLoaded'. Either include it or remove the dependency array.","ArrayExpression",["83"],"'FC' is defined but never used.","'useEffect' is defined but never used.",["81"],["82"],"no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},"Update the dependencies array to be: [isLoaded]",{"range":"86","text":"87"},[1768,1770],"[isLoaded]"]